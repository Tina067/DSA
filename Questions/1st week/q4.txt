4. Maximum Subarray - LeetCode
First Approach:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int ans = INT_MIN;
        for(int i=0; i<n; i++){
            int current_sum = 0;
            for(int j=i; j<n; j++){
                current_sum = current_sum + nums[j];
                ans = max(ans, current_sum);
            }
        }
        return ans;
    }
};

Time Complexity: O(n^2);



Second Approach: Kadane's Algorithm:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      int n = nums.size();
      int sum = 0;
      int max = INT_MIN;
      for(int i=0; i<n; i++){
        sum +=nums[i];

         if(sum > max)
         max = sum;

         if(sum<0)
         sum =0;
      } 
      return max; 
    }
}

Time Complexity: O(n)
for optimal Approach, took help from youtube