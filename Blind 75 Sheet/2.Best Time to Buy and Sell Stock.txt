Question: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

Approach:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int maxProfit = 0;
       for(int i=0; i<prices.size(); i++){
        for(int j=i+1; j<prices.size(); j++){
            int diff = prices[j] - prices[i];
            if(diff > maxProfit)
            maxProfit = diff;
        }
       } 
       return maxProfit;
    }
};

Time Complexity: O(n^2)
Space Complexity: O(1)


Approach:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        priority_queue<int, vector<int>, greater<int>>minh;
        for(int i = prices.size()-1; i>=0; i--){
            if(minh.size()==0){
                minh.push(prices[i]);
                continue;
            }

            if(minh.size()>1)
            minh.pop();

            if(minh.top() > prices[i])
            ans = max(ans, (minh.top()-prices[i]));

            minh.push(prices[i]);
        }
        return ans;
    }
};

