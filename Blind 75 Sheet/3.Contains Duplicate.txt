Question: https://leetcode.com/problems/contains-duplicate/description/
Approach:
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums[i] == nums[j])
                return true;
            }
        }
        return false;
    }
};

Time Complexity: O(n^2)
Space Complexity: O(1)


Approach:
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int,int>mp;
        for(auto num : nums){
            mp[num]++;
        }
        for(auto a : mp){
            if(a.second > 1)
            return true;
        }
        return false;
    }
};

Time Complexity: O(nlogn)
Space Complexity: O(n)


Approach:
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
      sort(nums.begin(), nums.end());
      for(int i=0; i<nums.size()-1; i++){
        if(nums[i]-nums[i+1] == 0)
        return true;
      }  
      return false;
    }
};

Time Complexity: O(nlogn)
Space Complexity: O(1)