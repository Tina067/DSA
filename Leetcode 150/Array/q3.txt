Quetion: https://leetcode.com/problems/merge-sorted-array/submissions/1442570817/?envType=study-plan-v2&envId=top-interview-150

Approach 1: 
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int i=0; i<n; i++){
            nums1[i+m] = nums2[i];
        }
        sort(nums1.begin(), nums1.end());
    }
};
Time Complexity: O(nlogn)

Approach 2: 
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(m==1 && n==0)
        return;
        if(m==0 && n==1){
            nums1[0] = nums2[0];
            return;
        }
        int size=n+m;
        int j=0;
        for(int i=m; i<size; i++){
            nums1[i] = nums2[j];
            j++;
        }
        for(int round=0; round<size-1; round++){
            int flag=false;
            for(int i=0; i<size-1-round; i++){
                if(nums1[i]>nums1[i+1]){
                    swap(nums1[i], nums1[i+1]);
                     flag=true;
                }
            }
            if(flag==false){
                break;
            }
        }
    }
};